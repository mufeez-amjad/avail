name: Create release
on:
  push:
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'

env:
  BIN_NAME: avail
  PROJECT_NAME: avail
  REPO_NAME: mufeez-amjad/avail

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        build: [x86_64-linux, x86_64-darwin, x86_64-windows]
        include:
        - build: x86_64-linux
          os: ubuntu-latest
          rust: stable
          target: x86_64-unknown-linux-gnu
          cross: false
        - build: x86_64-darwin
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
          cross: false
        - build: x86_64-windows
          os: windows-latest
          rust: stable
          target: x86_64-pc-windows-msvc
          cross: false

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install ${{ matrix.rust }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true

      # - name: Run cargo test
      #   uses: actions-rs/cargo@v1
      #   with:
      #     use-cross: ${{ matrix.cross }}
      #     command: test
      #     args: --release --locked --target ${{ matrix.target }}

      - name: Install ARM target
        if: matrix.os == 'macos-latest'
        run: rustup update && rustup target add aarch64-apple-darwin

      - name: ARM Build
        if: matrix.os == 'macos-latest'
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release --locked --target aarch64-apple-darwin

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release --locked --target ${{ matrix.target }}

      - name: Strip release binary (linux and macos)
        if: matrix.build == 'x86_64-linux' || matrix.build == 'x86_64-darwin'
        run: strip "target/${{ matrix.target }}/release/$BIN_NAME"

      - name: Strip release binary (arm)
        if: matrix.build == 'aarch64-linux'
        run: |
          docker run --rm -v \
            "$PWD/target:/target:Z" \
            rustembedded/cross:${{ matrix.target }} \
            aarch64-linux-gnu-strip \
            /target/${{ matrix.target }}/release/$BIN_NAME

      - name: Build archive
        shell: bash
        run: |
          mkdir dist
          # windows binary is named $BIN_NAME.exe
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "target/${{ matrix.target }}/release/$BIN_NAME.exe" "dist/"
          # macos binary is named $BIN_NAME and $BIN_NAME-aarch64
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            cp "target/${{ matrix.target }}/release/$BIN_NAME" "dist/"
            cp "target/aarch64-apple-darwin/release/$BIN_NAME" "dist/$BIN_NAME-aarch64"
          # linux binary is named $BIN_NAME
          else
            cp "target/${{ matrix.target }}/release/$BIN_NAME" "dist/"
          fi

      - uses: actions/upload-artifact@v2.2.4
        with:
          name: bins-${{ matrix.build }}
          path: dist

  publish:
    name: Publish
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: false

      - uses: actions/download-artifact@v2
      - run: ls -al bins-*

      - name: Calculate tag name
        run: |
          name=dev
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            name=${GITHUB_REF:10}
          fi
          echo val=$name >> $GITHUB_OUTPUT
          echo TAG=$name >> $GITHUB_ENV
        id: tagname

      - name: Build archive
        shell: bash
        run: |
          set -ex

          rm -rf tmp
          mkdir tmp
          mkdir dist

          for dir in bins-* ; do
            # e.g. "bins-x86_64-linux"
            arch=$(echo $dir | cut -d'-' -f2)
            platform=$(echo $dir | cut -d'-' -f3)

            unset exe
            if [[ $platform =~ "windows" || $platform =~ "linux" ]]; then
              if [[ $platform =~ "windows" ]]; then
                exe=".exe"
              fi

              pkgname=$PROJECT_NAME-$arch-$platform

              mkdir tmp/$pkgname
              mv $dir/$BIN_NAME$exe tmp/$pkgname

              chmod +x tmp/$pkgname/$BIN_NAME$exe

              if [[ $platform =~ "windows" ]]; then
                (cd tmp && 7z a -r ../dist/$pkgname.zip $pkgname)
              else
                tar cJf dist/$pkgname.tar.xz -C tmp $pkgname
              fi
            elif [[ $platform =~ "darwin" ]]; then
              pkgname=$PROJECT_NAME-$arch-$platform
              mkdir tmp/$pkgname
              mv $dir/$BIN_NAME tmp/$pkgname
              chmod +x tmp/$pkgname/$BIN_NAME
              tar cJf dist/$pkgname.tar.xz -C tmp $pkgname

              pkgname=$PROJECT_NAME-aarch64-$platform
              mkdir tmp/$pkgname
              mv $dir/$BIN_NAME-aarch64 tmp/$pkgname/$BIN_NAME
              chmod +x tmp/$pkgname/$BIN_NAME
              tar cJf dist/$pkgname.tar.xz -C tmp $pkgname
            else
              echo "Unknown platform $platform"
              exit 1
            fi
          done

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          file_glob: true
          tag: ${{ steps.tagname.outputs.val }}
          overwrite: true

      - name: Extract version
        id: extract-version
        run: |
          printf "%s=%s\n" tag-name "${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
